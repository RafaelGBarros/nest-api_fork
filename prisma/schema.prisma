generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ARTISAN
  MODERATOR
  ADMIN
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  role       Role
  isDisabled Boolean  @default(false) @map("is_disabled")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  profile                         UserProfile?
  artisan                         ArtisanProfile?
  sessions                        Session[]
  artisanCreationRequestsSent     ArtisanCreationRequest[] @relation("userRequesting")
  artisanCreationRequestsReviewed ArtisanCreationRequest[] @relation("userReviewer")

  @@map("users")
}

model UserProfile {
  id         String   @id @default(uuid())
  userId     String   @unique @map("fk_user_id")
  name       String
  socialName String?  @map("social_name")
  cpf        String   @unique
  birthDate  DateTime @map("dt_birth")
  street     String?
  postalCode String?  @map("postal_code")
  city       String?
  number     String?
  phone      String?
  avatar     String?

  user User @relation(fields: [userId], references: [id])

  @@map("users_profile")
}

model ArtisanProfile {
  id                     String   @id @default(uuid())
  userId                 String   @unique @map("fk_user_id")
  rawMaterial            String   @map("raw_material")
  technique              String
  finalityClassification String   @map("finality_classification")
  sicab                  String
  sisabRegistrationDate  DateTime @map("sisab_registration_date")
  sisabValidUntil        DateTime @map("sisab_valid_until")
  isDisabled             Boolean  @default(false) @map("is_disabled")

  user User @relation(fields: [userId], references: [id])

  @@map("artisans_profile")
}

model ArtisanCreationRequest {
  id         String        @id @default(uuid())
  userId     String        @map("fk_user_id")
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @default(now()) @map("updated_at")
  status     RequestStatus @default(PENDING)
  reviewerId String?       @map("fk_user_reviewer_id")
  reviwedAt  DateTime?     @map("reviwed_at")
  reason     String?

  userRequesting User  @relation(fields: [userId], references: [id], name: "userRequesting")
  userReviwer    User? @relation(fields: [reviewerId], references: [id], name: "userReviewer")

  @@map("artisan_creation_requests")
}

model Session {
  id        String    @id @default(uuid())
  userId    String    @map("fk_user_id")
  startedAt DateTime  @default(now()) @map("started_at")
  endedAt   DateTime? @map("ended_at")
  ipHost    String    @map("ip_host")
  device    String

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}
